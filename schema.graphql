type Account @entity {
  "Account address"
  id: ID!
  transfersTo: [Transfer!] @derivedFrom(field: "to")
  transfersFrom: [Transfer!] @derivedFrom(field: "from")
}

type Transfer @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  from: Account!
  to: Account!
  amount: BigInt! @index
  fee: BigInt! # fee is calculated at the best effort and may be zero for some old extrinsics
}

type AccumulatedReward @entity {
  id: ID! #address
  amount: BigInt!
}

type StakeChange @entity {
  id: ID!
  blockNumber: Int!
  extrinsicHash: String
  eventIdx: Int!
  timestamp: BigInt! @index
  address: String! @index
  amount: BigInt!
  accumulatedAmount: BigInt!
  type: String!
}

type AccumulatedStake @entity {
  id: ID!
  amount: BigInt!
}

type ErrorEvent @entity {
  id: ID!
  description: String!
}
